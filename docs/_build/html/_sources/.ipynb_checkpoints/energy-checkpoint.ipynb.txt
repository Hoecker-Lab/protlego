{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Energy evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import protlego"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append(\"/agh/projects/noelia/github/\")\n",
    "from protlego import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's fetch the same example we have been working on, the relationship between Rossmann and P-loop domains:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "myhit= fetch_id('4413706')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build all possible chimera-combinations from query and subject. As explained in detail in the \"Building chimeras\" section. The variable chimeras stores all the possible combinations,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-12 15:26:15,249 - protlego - INFO - Attempting to download domain d2dfda1 from the SCOP server\n",
      "2020-10-12 15:26:16,766 - protlego - INFO - File downloaded as /tmp/tmpffw47_x7.pdb\n",
      "2020-10-12 15:26:16,767 - protlego - INFO - Attempting to download domain d1wa5a_ from the SCOP server\n",
      "2020-10-12 15:26:18,415 - protlego - INFO - File downloaded as /tmp/tmpjk_0aw95.pdb\n",
      "2020-10-12 15:26:18,417 - protlego - INFO - Loading /tmp/tmpffw47_x7.pdb as a chimera object\n",
      "2020-10-12 15:26:18,517 - moleculekit.molecule - WARNING - Alternative atom locations detected. Only altloc A was kept. If you prefer to keep all use the keepaltloc=\"all\" option when reading the file.\n",
      "2020-10-12 15:26:18,520 - protlego - INFO - Loading /tmp/tmpjk_0aw95.pdb as a chimera object\n",
      "2020-10-12 15:26:18,581 - protlego - INFO - Attempting to download hhs file for d2dfda1 from the FUZZLE server\n",
      "2020-10-12 15:26:18,716 - protlego - INFO - File downloaded as /tmp/tmpde_xzouh.hhs\n",
      "2020-10-12 15:26:19,766 - protlego - INFO - Performing alignment 1 with TMalign\n",
      "2020-10-12 15:26:22,892 - protlego - INFO - The RMSD between the fragments is 0.6881080269813538 over 6 alpha carbons\n",
      "2020-10-12 15:26:22,899 - protlego - INFO - Performing alignment 2 with TMalign\n",
      "2020-10-12 15:26:22,965 - protlego - INFO - The RMSD between the fragments is 2.3234670162200928 over 6 alpha carbons\n",
      "2020-10-12 15:26:22,972 - protlego - INFO - Performing alignment 3 with TMalign\n",
      "2020-10-12 15:26:23,043 - protlego - INFO - The RMSD between the fragments is 1.1804629564285278 over 9 alpha carbons\n",
      "2020-10-12 15:26:23,050 - protlego - INFO - Performing alignment 4 with TMalign\n",
      "2020-10-12 15:26:23,147 - protlego - INFO - The RMSD between the fragments is 10.348335266113281 over 34 alpha carbons\n",
      "2020-10-12 15:26:23,157 - protlego - INFO - Performing alignment 5 with TMalign\n",
      "2020-10-12 15:26:23,232 - protlego - INFO - The RMSD between the fragments is 4.646137714385986 over 17 alpha carbons\n",
      "2020-10-12 15:26:23,241 - protlego - INFO - Performing alignment 6 with TMalign\n",
      "2020-10-12 15:26:23,321 - protlego - INFO - The RMSD between the fragments is 3.52919340133667 over 29 alpha carbons\n"
     ]
    }
   ],
   "source": [
    "a=Builder(myhit)\n",
    "aln=a.get_alignment(myhit.query,myhit.no)\n",
    "qPDB, sPDB = a.superimpose_structures(aln,partial_alignment=True)\n",
    "chimeras=a.build_chimeras(partial_alignment=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Energy calculation using molecular mechanics (Amber and Charmm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can evaluate the potential energy of a chimera with the Charmm and Amber forcefieldds. As an option we can keep intermediate file in a folder or not. The function score_pot_energy takes a Chimera object as input and applies the selected forcefield:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-12 15:26:30,717 - propka - INFO - No pdbfile provided\n",
      "/agh/projects/noelia/miniconda3/envs/my-rdkit-env/lib/python3.6/site-packages/numpy/core/fromnumeric.py:57: FutureWarning: Series.nonzero() is deprecated and will be removed in a future version.Use Series.to_numpy().nonzero() instead\n",
      "  return getattr(obj, method)(*args, **kwds)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Potential Energy: 34646.30864467745 kcal/mol\n"
     ]
    }
   ],
   "source": [
    "chimera=Builder.mutate_nonstandards(chimeras['comb1_72'])\n",
    "_,_=score_pot_energy(chimeras['comb1_72'], 'amber')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The built chimeras sometimes present internal clashes. For this reason, they tend to present very high potential energy scores. To compute a more realistic measure, we can minimize the structure using the minimize_potential_energy function. There's the possibility to run the minimization with GPU acceleration, and one can also choose to restraint the backbone or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Energy before minimization 34646.308644677454 kcal/mol\n",
      "Energy after minimization -3350.4187825470835 kcal/mol\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(Quantity(value=-3350.4187825470835, unit=kilocalorie/mole),\n",
       " <protlego.builder.chimera.Chimera object at 0x7fe8356d5e48>\n",
       " Protein with:\n",
       " Number of residues: 165\n",
       " Number of atoms: 2622)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minimize_potential_energy(chimera, 'amber', cuda=True, restraint_backbone=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
